#!/usr/bin/env node

var argv = require('optimist').argv, debug = false;

if (argv.debug) {
    debug = true;
} else {
    for (var i=0; i<argv._.length; i++) {
        if (/^debug$/i.test(argv._[i])) {
            debug = true;
            break;
        }
    }
}

var spawn = require('child_process').spawn;
var osName = process.platform;

var fs = require("fs");

var colors = require('colors');

testDocs();

function testDocs() {
    fs.exists("./dist/lib", function(exists) {
        if (exists) {
            installDocs();
        } else {
            console.log("Building test resources...".yellow);
            exec("grunt", installDocs);
        }
    });
}

function installDocs() {
    fs.exists("./docs/node_modules", function(exists) {
        if (exists) {
            runDocs();
        } else {
            console.log("\nInstalling docs:server dependencies...".yellow);
            exec("cd docs && npm install && cd ..", runDocs);
        }
    });
}

function runDocs() {
    var cmd = "";
    if (/^win/i.test(osName)) {
        // in windows
        cmd += "set ";
    }
    cmd += "DEBUG=docs:server & node ./docs/bin/www";
    exec(cmd);
}

function exec(cmd, callback) {
    var cprocess;

    if (/^win/i.test(osName)) {
        // in windows
        cprocess = spawn("cmd.exe", ['/s', '/c', cmd]);
    } else {
        // in linux
        cprocess = spawn("/bin/sh", ['-c', cmd]);
    }

    // 子进程的输出导向控制台
    cprocess.stdout.pipe(process.stdout);
    cprocess.stderr.pipe(process.stdout);

    cprocess.on('exit', function() {
        if (typeof callback === "function") callback();
    });
}